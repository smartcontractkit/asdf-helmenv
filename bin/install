#!/usr/bin/env bash

# Heavily based on https://github.com/hypnoglow/asdf-golangci-lint/blob/master/bin/install

set \
    -o nounset \
    -o pipefail \
    -o errexit

app_name="helmenv"
app_binary="envcli"

install_helmenv() {
    # local -r install_type=${1} #Unused
    local -r version=${2}
    local -r install_path=${3}

    local -r bin_install_path="${install_path}/bin"
    local -r binary_path="${bin_install_path}/${app_binary}"

    local tmp_download_dir
    if [[ -n "${TMPDIR:-}" ]]; then
        tmp_download_dir=${TMPDIR}
    else
        tmp_download_dir=$(mktemp -d -t ${app_name}_XXXXXX)
    fi

    local -r platform="$(get_platform)"
    local -r architecture="$(get_arch)"
    local -r filename="$(get_filename "${version}" "${platform}" "${architecture}")"
    local -r download_url="$(get_download_url "${version}" "${platform}" "${architecture}")"
    local -r download_path="${tmp_download_dir}/${filename}"

    echo "Downloading ${app_name} from ${download_url} to ${download_path}"
    curl -sSLo "${download_path}" "${download_url}"

    echo "Creating bin directory"
    mkdir -p "${bin_install_path}"

    echo "Cleaning previous binaries"
    rm -f "${binary_path}" 2>/dev/null || true

    echo "Copying binary"
    tar xzf "${download_path}" --directory "${tmp_download_dir}"
    cp "${tmp_download_dir}"/"${filename%.tar.gz}"/${app_binary} "${bin_install_path}"
    chmod +x "${binary_path}"

    echo "Cleaning up downloads"
    rm -f "${download_path}"
}

get_platform() {
    uname | tr '[:upper:]' '[:lower:]'
}

get_arch() {
    local arch=""
    local arch_check=${ASDF_GOLANG_OVERWRITE_ARCH:-"$(uname -m)"}
    case "${arch_check}" in
    x86_64 | amd64) arch="amd64" ;;
    aarch64 | arm64) arch="arm64" ;;
    *)
        fail "Arch '${arch_check}' not supported!"
        ;;
    esac

    printf "%s" "${arch}"
}

get_filename() {
    local -r version="${1}"
    local -r platform="${2}"
    local -r architecture="${3}"

    echo "${app_name}-${version}-${platform}-${architecture}.tar.gz"
}

get_download_url() {
    local -r version="${1}"
    local -r platform="${2}"
    local -r architecture="${3}"
    local -r filename="$(get_filename "${version}" "${platform}" "${architecture}")"

    echo "https://github.com/smartcontractkit/helmenv/releases/download/v${version}/${filename}"
}

install_helmenv "${ASDF_INSTALL_TYPE}" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
